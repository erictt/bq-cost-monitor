config {
  type: "table",
  description: "Cross-tabulation of which users/service accounts are querying which datasets and the associated costs",
  columns: {
    date: "Date of the query execution (YYYY-MM-DD)",
    project_id: "Google Cloud project ID",
    user: "User email or service account that executed the queries",
    is_service_account: "Whether this is a service account or a regular user",
    dataset_name: "Dataset name (project.dataset)",
    query_count: "Number of queries executed against this dataset",
    bytes_processed: "Total bytes processed",
    cost_usd: "Total cost in USD",
    top_tables: "Most expensive tables in this dataset accessed by this user"
  },
  bigquery: {
    partitionBy: "date",
    clusterBy: ["user", "dataset_name"]
  },
  tags: ["cost", "monitoring", "datasets", "users", "attribution"]
}

-- Extract user-dataset relationships from the cost monitoring data
WITH user_dataset_data AS (
  SELECT
    cm.date,
    cm.project_id,
    -- Normalize user identifier
    COALESCE(cm.service_account, cm.user_email) AS user,
    -- Identify if this is a service account
    (cm.service_account IS NOT NULL) AS is_service_account,
    -- Extract dataset information
    ds.dataset AS dataset_name,
    ds.bytes_processed,
    ds.dataset_cost_usd AS cost_usd,
    ds.query_count
  FROM 
    ${ref("bigquery_cost_monitoring")} cm,
    UNNEST(cm.dataset_costs) AS ds
),

-- Extract user-table relationships
user_table_data AS (
  SELECT
    cm.date,
    cm.project_id,
    -- Normalize user identifier
    COALESCE(cm.service_account, cm.user_email) AS user,
    -- Identify if this is a service account
    (cm.service_account IS NOT NULL) AS is_service_account,
    -- Extract table information
    t.dataset_name,
    t.table_name,
    t.table_id,
    t.bytes_processed,
    t.table_cost_usd AS cost_usd
  FROM 
    ${ref("bigquery_cost_monitoring")} cm,
    UNNEST(cm.table_costs) AS t
)

-- Main attribution table
SELECT
  ud.date,
  ud.project_id,
  ud.user,
  ud.is_service_account,
  ud.dataset_name,
  SUM(ud.query_count) AS query_count,
  SUM(ud.bytes_processed) AS bytes_processed,
  SUM(ud.cost_usd) AS cost_usd,
  -- Include top tables accessed by this user in this dataset
  ARRAY(
    SELECT AS STRUCT
      ut.table_name,
      ut.table_id,
      SUM(ut.cost_usd) AS table_cost_usd,
      SUM(ut.bytes_processed) AS bytes_processed
    FROM 
      user_table_data ut
    WHERE
      ut.date = ud.date
      AND ut.user = ud.user
      AND ut.dataset_name = ud.dataset_name
    GROUP BY
      ut.table_name, ut.table_id
    ORDER BY
      table_cost_usd DESC
    LIMIT 10
  ) AS top_tables,
  -- Calculate percentage of user's total cost that comes from this dataset
  ROUND(
    SUM(ud.cost_usd) / (
      SELECT SUM(ud2.cost_usd) 
      FROM user_dataset_data ud2 
      WHERE 
        ud2.date = ud.date 
        AND ud2.user = ud.user
    ) * 100, 
    2
  ) AS pct_of_user_cost,
  -- Calculate percentage of dataset's total cost that comes from this user
  ROUND(
    SUM(ud.cost_usd) / (
      SELECT SUM(ud3.cost_usd) 
      FROM user_dataset_data ud3 
      WHERE 
        ud3.date = ud.date 
        AND ud3.dataset_name = ud.dataset_name
    ) * 100, 
    2
  ) AS pct_of_dataset_cost
FROM
  user_dataset_data ud
GROUP BY
  date, project_id, user, is_service_account, dataset_name
ORDER BY
  date DESC, cost_usd DESC